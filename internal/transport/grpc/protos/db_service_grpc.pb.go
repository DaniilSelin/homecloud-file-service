// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: db_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBService_CreateUser_FullMethodName                = "/dbservice.DBService/CreateUser"
	DBService_GetUserByID_FullMethodName               = "/dbservice.DBService/GetUserByID"
	DBService_GetUserByEmail_FullMethodName            = "/dbservice.DBService/GetUserByEmail"
	DBService_UpdateUser_FullMethodName                = "/dbservice.DBService/UpdateUser"
	DBService_UpdatePassword_FullMethodName            = "/dbservice.DBService/UpdatePassword"
	DBService_UpdateUsername_FullMethodName            = "/dbservice.DBService/UpdateUsername"
	DBService_UpdateEmailVerification_FullMethodName   = "/dbservice.DBService/UpdateEmailVerification"
	DBService_UpdateLastLogin_FullMethodName           = "/dbservice.DBService/UpdateLastLogin"
	DBService_UpdateFailedLoginAttempts_FullMethodName = "/dbservice.DBService/UpdateFailedLoginAttempts"
	DBService_UpdateLockedUntil_FullMethodName         = "/dbservice.DBService/UpdateLockedUntil"
	DBService_UpdateStorageUsage_FullMethodName        = "/dbservice.DBService/UpdateStorageUsage"
	DBService_CheckEmailExists_FullMethodName          = "/dbservice.DBService/CheckEmailExists"
	DBService_CheckUsernameExists_FullMethodName       = "/dbservice.DBService/CheckUsernameExists"
	DBService_CreateFile_FullMethodName                = "/dbservice.DBService/CreateFile"
	DBService_GetFileByID_FullMethodName               = "/dbservice.DBService/GetFileByID"
	DBService_GetFileByPath_FullMethodName             = "/dbservice.DBService/GetFileByPath"
	DBService_UpdateFile_FullMethodName                = "/dbservice.DBService/UpdateFile"
	DBService_DeleteFile_FullMethodName                = "/dbservice.DBService/DeleteFile"
	DBService_SoftDeleteFile_FullMethodName            = "/dbservice.DBService/SoftDeleteFile"
	DBService_RestoreFile_FullMethodName               = "/dbservice.DBService/RestoreFile"
	DBService_ListFiles_FullMethodName                 = "/dbservice.DBService/ListFiles"
	DBService_ListFilesByParent_FullMethodName         = "/dbservice.DBService/ListFilesByParent"
	DBService_ListStarredFiles_FullMethodName          = "/dbservice.DBService/ListStarredFiles"
	DBService_ListTrashedFiles_FullMethodName          = "/dbservice.DBService/ListTrashedFiles"
	DBService_SearchFiles_FullMethodName               = "/dbservice.DBService/SearchFiles"
	DBService_GetFileSize_FullMethodName               = "/dbservice.DBService/GetFileSize"
	DBService_UpdateFileSize_FullMethodName            = "/dbservice.DBService/UpdateFileSize"
	DBService_UpdateLastViewed_FullMethodName          = "/dbservice.DBService/UpdateLastViewed"
	DBService_GetFileTree_FullMethodName               = "/dbservice.DBService/GetFileTree"
	DBService_CreateRevision_FullMethodName            = "/dbservice.DBService/CreateRevision"
	DBService_GetRevisions_FullMethodName              = "/dbservice.DBService/GetRevisions"
	DBService_GetRevision_FullMethodName               = "/dbservice.DBService/GetRevision"
	DBService_DeleteRevision_FullMethodName            = "/dbservice.DBService/DeleteRevision"
	DBService_CreatePermission_FullMethodName          = "/dbservice.DBService/CreatePermission"
	DBService_GetPermissions_FullMethodName            = "/dbservice.DBService/GetPermissions"
	DBService_UpdatePermission_FullMethodName          = "/dbservice.DBService/UpdatePermission"
	DBService_DeletePermission_FullMethodName          = "/dbservice.DBService/DeletePermission"
	DBService_CheckPermission_FullMethodName           = "/dbservice.DBService/CheckPermission"
	DBService_UpdateFileMetadata_FullMethodName        = "/dbservice.DBService/UpdateFileMetadata"
	DBService_GetFileMetadata_FullMethodName           = "/dbservice.DBService/GetFileMetadata"
	DBService_StarFile_FullMethodName                  = "/dbservice.DBService/StarFile"
	DBService_UnstarFile_FullMethodName                = "/dbservice.DBService/UnstarFile"
	DBService_MoveFile_FullMethodName                  = "/dbservice.DBService/MoveFile"
	DBService_CopyFile_FullMethodName                  = "/dbservice.DBService/CopyFile"
	DBService_RenameFile_FullMethodName                = "/dbservice.DBService/RenameFile"
	DBService_VerifyFileIntegrity_FullMethodName       = "/dbservice.DBService/VerifyFileIntegrity"
	DBService_CalculateFileChecksums_FullMethodName    = "/dbservice.DBService/CalculateFileChecksums"
)

// DBServiceClient is the client API for DBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type DBServiceClient interface {
	// User operations
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateEmailVerification(ctx context.Context, in *UpdateEmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLastLogin(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFailedLoginAttempts(ctx context.Context, in *UpdateFailedLoginAttemptsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLockedUntil(ctx context.Context, in *UpdateLockedUntilRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStorageUsage(ctx context.Context, in *UpdateStorageUsageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CheckUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// File operations
	CreateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileID, error)
	GetFileByID(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*File, error)
	GetFileByPath(ctx context.Context, in *GetFileByPathRequest, opts ...grpc.CallOption) (*File, error)
	UpdateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SoftDeleteFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestoreFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	ListFilesByParent(ctx context.Context, in *ListFilesByParentRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	ListStarredFiles(ctx context.Context, in *ListStarredFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	ListTrashedFiles(ctx context.Context, in *ListTrashedFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFileSize(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*FileSizeResponse, error)
	UpdateFileSize(ctx context.Context, in *UpdateFileSizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLastViewed(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFileTree(ctx context.Context, in *GetFileTreeRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// File revision operations
	CreateRevision(ctx context.Context, in *FileRevision, opts ...grpc.CallOption) (*RevisionID, error)
	GetRevisions(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ListRevisionsResponse, error)
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*FileRevision, error)
	DeleteRevision(ctx context.Context, in *RevisionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// File permission operations
	CreatePermission(ctx context.Context, in *FilePermission, opts ...grpc.CallOption) (*PermissionID, error)
	GetPermissions(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	UpdatePermission(ctx context.Context, in *FilePermission, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error)
	// File metadata operations
	UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFileMetadata(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*FileMetadataResponse, error)
	// File operations (star, move, copy, rename)
	StarFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnstarFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*File, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// File integrity operations
	VerifyFileIntegrity(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*IntegrityResponse, error)
	CalculateFileChecksums(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ChecksumsResponse, error)
}

type dBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBServiceClient(cc grpc.ClientConnInterface) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserID)
	err := c.cc.Invoke(ctx, DBService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DBService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DBService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateEmailVerification(ctx context.Context, in *UpdateEmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateLastLogin(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateLastLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFailedLoginAttempts(ctx context.Context, in *UpdateFailedLoginAttemptsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateFailedLoginAttempts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateLockedUntil(ctx context.Context, in *UpdateLockedUntilRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateLockedUntil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateStorageUsage(ctx context.Context, in *UpdateStorageUsageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateStorageUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, DBService_CheckEmailExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, DBService_CheckUsernameExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CreateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileID)
	err := c.cc.Invoke(ctx, DBService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileByID(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, DBService_GetFileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileByPath(ctx context.Context, in *GetFileByPathRequest, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, DBService_GetFileByPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DeleteFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) SoftDeleteFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_SoftDeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) RestoreFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_RestoreFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListFilesByParent(ctx context.Context, in *ListFilesByParentRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_ListFilesByParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListStarredFiles(ctx context.Context, in *ListStarredFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_ListStarredFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListTrashedFiles(ctx context.Context, in *ListTrashedFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_ListTrashedFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_SearchFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileSize(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*FileSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileSizeResponse)
	err := c.cc.Invoke(ctx, DBService_GetFileSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFileSize(ctx context.Context, in *UpdateFileSizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateFileSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateLastViewed(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateLastViewed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileTree(ctx context.Context, in *GetFileTreeRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, DBService_GetFileTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CreateRevision(ctx context.Context, in *FileRevision, opts ...grpc.CallOption) (*RevisionID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevisionID)
	err := c.cc.Invoke(ctx, DBService_CreateRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetRevisions(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ListRevisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRevisionsResponse)
	err := c.cc.Invoke(ctx, DBService_GetRevisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*FileRevision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileRevision)
	err := c.cc.Invoke(ctx, DBService_GetRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DeleteRevision(ctx context.Context, in *RevisionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_DeleteRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CreatePermission(ctx context.Context, in *FilePermission, opts ...grpc.CallOption) (*PermissionID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionID)
	err := c.cc.Invoke(ctx, DBService_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetPermissions(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, DBService_GetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdatePermission(ctx context.Context, in *FilePermission, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, DBService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileMetadata(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*FileMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetadataResponse)
	err := c.cc.Invoke(ctx, DBService_GetFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) StarFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_StarFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UnstarFile(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UnstarFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, DBService_CopyFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_RenameFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) VerifyFileIntegrity(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*IntegrityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrityResponse)
	err := c.cc.Invoke(ctx, DBService_VerifyFileIntegrity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CalculateFileChecksums(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*ChecksumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChecksumsResponse)
	err := c.cc.Invoke(ctx, DBService_CalculateFileChecksums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServiceServer is the server API for DBService service.
// All implementations must embed UnimplementedDBServiceServer
// for forward compatibility.
//
// Service definition
type DBServiceServer interface {
	// User operations
	CreateUser(context.Context, *User) (*UserID, error)
	GetUserByID(context.Context, *UserID) (*User, error)
	GetUserByEmail(context.Context, *EmailRequest) (*User, error)
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error)
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*emptypb.Empty, error)
	UpdateEmailVerification(context.Context, *UpdateEmailVerificationRequest) (*emptypb.Empty, error)
	UpdateLastLogin(context.Context, *UserID) (*emptypb.Empty, error)
	UpdateFailedLoginAttempts(context.Context, *UpdateFailedLoginAttemptsRequest) (*emptypb.Empty, error)
	UpdateLockedUntil(context.Context, *UpdateLockedUntilRequest) (*emptypb.Empty, error)
	UpdateStorageUsage(context.Context, *UpdateStorageUsageRequest) (*emptypb.Empty, error)
	CheckEmailExists(context.Context, *EmailRequest) (*ExistsResponse, error)
	CheckUsernameExists(context.Context, *UsernameRequest) (*ExistsResponse, error)
	// File operations
	CreateFile(context.Context, *File) (*FileID, error)
	GetFileByID(context.Context, *FileID) (*File, error)
	GetFileByPath(context.Context, *GetFileByPathRequest) (*File, error)
	UpdateFile(context.Context, *File) (*emptypb.Empty, error)
	DeleteFile(context.Context, *FileID) (*emptypb.Empty, error)
	SoftDeleteFile(context.Context, *FileID) (*emptypb.Empty, error)
	RestoreFile(context.Context, *FileID) (*emptypb.Empty, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	ListFilesByParent(context.Context, *ListFilesByParentRequest) (*ListFilesResponse, error)
	ListStarredFiles(context.Context, *ListStarredFilesRequest) (*ListFilesResponse, error)
	ListTrashedFiles(context.Context, *ListTrashedFilesRequest) (*ListFilesResponse, error)
	SearchFiles(context.Context, *SearchFilesRequest) (*ListFilesResponse, error)
	GetFileSize(context.Context, *FileID) (*FileSizeResponse, error)
	UpdateFileSize(context.Context, *UpdateFileSizeRequest) (*emptypb.Empty, error)
	UpdateLastViewed(context.Context, *FileID) (*emptypb.Empty, error)
	GetFileTree(context.Context, *GetFileTreeRequest) (*ListFilesResponse, error)
	// File revision operations
	CreateRevision(context.Context, *FileRevision) (*RevisionID, error)
	GetRevisions(context.Context, *FileID) (*ListRevisionsResponse, error)
	GetRevision(context.Context, *GetRevisionRequest) (*FileRevision, error)
	DeleteRevision(context.Context, *RevisionID) (*emptypb.Empty, error)
	// File permission operations
	CreatePermission(context.Context, *FilePermission) (*PermissionID, error)
	GetPermissions(context.Context, *FileID) (*ListPermissionsResponse, error)
	UpdatePermission(context.Context, *FilePermission) (*emptypb.Empty, error)
	DeletePermission(context.Context, *PermissionID) (*emptypb.Empty, error)
	CheckPermission(context.Context, *CheckPermissionRequest) (*PermissionResponse, error)
	// File metadata operations
	UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*emptypb.Empty, error)
	GetFileMetadata(context.Context, *FileID) (*FileMetadataResponse, error)
	// File operations (star, move, copy, rename)
	StarFile(context.Context, *FileID) (*emptypb.Empty, error)
	UnstarFile(context.Context, *FileID) (*emptypb.Empty, error)
	MoveFile(context.Context, *MoveFileRequest) (*emptypb.Empty, error)
	CopyFile(context.Context, *CopyFileRequest) (*File, error)
	RenameFile(context.Context, *RenameFileRequest) (*emptypb.Empty, error)
	// File integrity operations
	VerifyFileIntegrity(context.Context, *FileID) (*IntegrityResponse, error)
	CalculateFileChecksums(context.Context, *FileID) (*ChecksumsResponse, error)
	mustEmbedUnimplementedDBServiceServer()
}

// UnimplementedDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBServiceServer struct{}

func (UnimplementedDBServiceServer) CreateUser(context.Context, *User) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDBServiceServer) GetUserByID(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedDBServiceServer) GetUserByEmail(context.Context, *EmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedDBServiceServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDBServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedDBServiceServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (UnimplementedDBServiceServer) UpdateEmailVerification(context.Context, *UpdateEmailVerificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailVerification not implemented")
}
func (UnimplementedDBServiceServer) UpdateLastLogin(context.Context, *UserID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastLogin not implemented")
}
func (UnimplementedDBServiceServer) UpdateFailedLoginAttempts(context.Context, *UpdateFailedLoginAttemptsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFailedLoginAttempts not implemented")
}
func (UnimplementedDBServiceServer) UpdateLockedUntil(context.Context, *UpdateLockedUntilRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockedUntil not implemented")
}
func (UnimplementedDBServiceServer) UpdateStorageUsage(context.Context, *UpdateStorageUsageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageUsage not implemented")
}
func (UnimplementedDBServiceServer) CheckEmailExists(context.Context, *EmailRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailExists not implemented")
}
func (UnimplementedDBServiceServer) CheckUsernameExists(context.Context, *UsernameRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsernameExists not implemented")
}
func (UnimplementedDBServiceServer) CreateFile(context.Context, *File) (*FileID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedDBServiceServer) GetFileByID(context.Context, *FileID) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByID not implemented")
}
func (UnimplementedDBServiceServer) GetFileByPath(context.Context, *GetFileByPathRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByPath not implemented")
}
func (UnimplementedDBServiceServer) UpdateFile(context.Context, *File) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedDBServiceServer) DeleteFile(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDBServiceServer) SoftDeleteFile(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDeleteFile not implemented")
}
func (UnimplementedDBServiceServer) RestoreFile(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFile not implemented")
}
func (UnimplementedDBServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedDBServiceServer) ListFilesByParent(context.Context, *ListFilesByParentRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesByParent not implemented")
}
func (UnimplementedDBServiceServer) ListStarredFiles(context.Context, *ListStarredFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStarredFiles not implemented")
}
func (UnimplementedDBServiceServer) ListTrashedFiles(context.Context, *ListTrashedFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrashedFiles not implemented")
}
func (UnimplementedDBServiceServer) SearchFiles(context.Context, *SearchFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFiles not implemented")
}
func (UnimplementedDBServiceServer) GetFileSize(context.Context, *FileID) (*FileSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (UnimplementedDBServiceServer) UpdateFileSize(context.Context, *UpdateFileSizeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileSize not implemented")
}
func (UnimplementedDBServiceServer) UpdateLastViewed(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastViewed not implemented")
}
func (UnimplementedDBServiceServer) GetFileTree(context.Context, *GetFileTreeRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileTree not implemented")
}
func (UnimplementedDBServiceServer) CreateRevision(context.Context, *FileRevision) (*RevisionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevision not implemented")
}
func (UnimplementedDBServiceServer) GetRevisions(context.Context, *FileID) (*ListRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevisions not implemented")
}
func (UnimplementedDBServiceServer) GetRevision(context.Context, *GetRevisionRequest) (*FileRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedDBServiceServer) DeleteRevision(context.Context, *RevisionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevision not implemented")
}
func (UnimplementedDBServiceServer) CreatePermission(context.Context, *FilePermission) (*PermissionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedDBServiceServer) GetPermissions(context.Context, *FileID) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedDBServiceServer) UpdatePermission(context.Context, *FilePermission) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedDBServiceServer) DeletePermission(context.Context, *PermissionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedDBServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedDBServiceServer) UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadata not implemented")
}
func (UnimplementedDBServiceServer) GetFileMetadata(context.Context, *FileID) (*FileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedDBServiceServer) StarFile(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarFile not implemented")
}
func (UnimplementedDBServiceServer) UnstarFile(context.Context, *FileID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstarFile not implemented")
}
func (UnimplementedDBServiceServer) MoveFile(context.Context, *MoveFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedDBServiceServer) CopyFile(context.Context, *CopyFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedDBServiceServer) RenameFile(context.Context, *RenameFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedDBServiceServer) VerifyFileIntegrity(context.Context, *FileID) (*IntegrityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFileIntegrity not implemented")
}
func (UnimplementedDBServiceServer) CalculateFileChecksums(context.Context, *FileID) (*ChecksumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFileChecksums not implemented")
}
func (UnimplementedDBServiceServer) mustEmbedUnimplementedDBServiceServer() {}
func (UnimplementedDBServiceServer) testEmbeddedByValue()                   {}

// UnsafeDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServiceServer will
// result in compilation errors.
type UnsafeDBServiceServer interface {
	mustEmbedUnimplementedDBServiceServer()
}

func RegisterDBServiceServer(s grpc.ServiceRegistrar, srv DBServiceServer) {
	// If the following call pancis, it indicates UnimplementedDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBService_ServiceDesc, srv)
}

func _DBService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetUserByEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateEmailVerification(ctx, req.(*UpdateEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateLastLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateLastLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateLastLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateLastLogin(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFailedLoginAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFailedLoginAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFailedLoginAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFailedLoginAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFailedLoginAttempts(ctx, req.(*UpdateFailedLoginAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateLockedUntil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockedUntilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateLockedUntil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateLockedUntil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateLockedUntil(ctx, req.(*UpdateLockedUntilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateStorageUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateStorageUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateStorageUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateStorageUsage(ctx, req.(*UpdateStorageUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckEmailExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckEmailExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckEmailExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckEmailExists(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckUsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckUsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckUsernameExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckUsernameExists(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileByID(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileByPath(ctx, req.(*GetFileByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DeleteFile(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_SoftDeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).SoftDeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_SoftDeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).SoftDeleteFile(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_RestoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).RestoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_RestoreFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).RestoreFile(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListFilesByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListFilesByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListFilesByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListFilesByParent(ctx, req.(*ListFilesByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListStarredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStarredFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListStarredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListStarredFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListStarredFiles(ctx, req.(*ListStarredFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListTrashedFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrashedFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListTrashedFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListTrashedFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListTrashedFiles(ctx, req.(*ListTrashedFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_SearchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).SearchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_SearchFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).SearchFiles(ctx, req.(*SearchFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileSize(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFileSize(ctx, req.(*UpdateFileSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateLastViewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateLastViewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateLastViewed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateLastViewed(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileTree(ctx, req.(*GetFileTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CreateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRevision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateRevision(ctx, req.(*FileRevision))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetRevisions(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DeleteRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevisionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DeleteRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DeleteRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DeleteRevision(ctx, req.(*RevisionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreatePermission(ctx, req.(*FilePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetPermissions(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdatePermission(ctx, req.(*FilePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DeletePermission(ctx, req.(*PermissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFileMetadata(ctx, req.(*UpdateFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileMetadata(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_StarFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).StarFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_StarFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).StarFile(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UnstarFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UnstarFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UnstarFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UnstarFile(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_RenameFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_VerifyFileIntegrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).VerifyFileIntegrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_VerifyFileIntegrity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).VerifyFileIntegrity(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CalculateFileChecksums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CalculateFileChecksums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CalculateFileChecksums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CalculateFileChecksums(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

// DBService_ServiceDesc is the grpc.ServiceDesc for DBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbservice.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DBService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _DBService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _DBService_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DBService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _DBService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _DBService_UpdateUsername_Handler,
		},
		{
			MethodName: "UpdateEmailVerification",
			Handler:    _DBService_UpdateEmailVerification_Handler,
		},
		{
			MethodName: "UpdateLastLogin",
			Handler:    _DBService_UpdateLastLogin_Handler,
		},
		{
			MethodName: "UpdateFailedLoginAttempts",
			Handler:    _DBService_UpdateFailedLoginAttempts_Handler,
		},
		{
			MethodName: "UpdateLockedUntil",
			Handler:    _DBService_UpdateLockedUntil_Handler,
		},
		{
			MethodName: "UpdateStorageUsage",
			Handler:    _DBService_UpdateStorageUsage_Handler,
		},
		{
			MethodName: "CheckEmailExists",
			Handler:    _DBService_CheckEmailExists_Handler,
		},
		{
			MethodName: "CheckUsernameExists",
			Handler:    _DBService_CheckUsernameExists_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _DBService_CreateFile_Handler,
		},
		{
			MethodName: "GetFileByID",
			Handler:    _DBService_GetFileByID_Handler,
		},
		{
			MethodName: "GetFileByPath",
			Handler:    _DBService_GetFileByPath_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _DBService_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _DBService_DeleteFile_Handler,
		},
		{
			MethodName: "SoftDeleteFile",
			Handler:    _DBService_SoftDeleteFile_Handler,
		},
		{
			MethodName: "RestoreFile",
			Handler:    _DBService_RestoreFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _DBService_ListFiles_Handler,
		},
		{
			MethodName: "ListFilesByParent",
			Handler:    _DBService_ListFilesByParent_Handler,
		},
		{
			MethodName: "ListStarredFiles",
			Handler:    _DBService_ListStarredFiles_Handler,
		},
		{
			MethodName: "ListTrashedFiles",
			Handler:    _DBService_ListTrashedFiles_Handler,
		},
		{
			MethodName: "SearchFiles",
			Handler:    _DBService_SearchFiles_Handler,
		},
		{
			MethodName: "GetFileSize",
			Handler:    _DBService_GetFileSize_Handler,
		},
		{
			MethodName: "UpdateFileSize",
			Handler:    _DBService_UpdateFileSize_Handler,
		},
		{
			MethodName: "UpdateLastViewed",
			Handler:    _DBService_UpdateLastViewed_Handler,
		},
		{
			MethodName: "GetFileTree",
			Handler:    _DBService_GetFileTree_Handler,
		},
		{
			MethodName: "CreateRevision",
			Handler:    _DBService_CreateRevision_Handler,
		},
		{
			MethodName: "GetRevisions",
			Handler:    _DBService_GetRevisions_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _DBService_GetRevision_Handler,
		},
		{
			MethodName: "DeleteRevision",
			Handler:    _DBService_DeleteRevision_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _DBService_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _DBService_GetPermissions_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _DBService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _DBService_DeletePermission_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _DBService_CheckPermission_Handler,
		},
		{
			MethodName: "UpdateFileMetadata",
			Handler:    _DBService_UpdateFileMetadata_Handler,
		},
		{
			MethodName: "GetFileMetadata",
			Handler:    _DBService_GetFileMetadata_Handler,
		},
		{
			MethodName: "StarFile",
			Handler:    _DBService_StarFile_Handler,
		},
		{
			MethodName: "UnstarFile",
			Handler:    _DBService_UnstarFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _DBService_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _DBService_CopyFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _DBService_RenameFile_Handler,
		},
		{
			MethodName: "VerifyFileIntegrity",
			Handler:    _DBService_VerifyFileIntegrity_Handler,
		},
		{
			MethodName: "CalculateFileChecksums",
			Handler:    _DBService_CalculateFileChecksums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}
